openapi: 3.0.3
info:
  title: Quaerendo API
  version: 1.0.0
servers:
- url: /
paths:
  /api/article/:
    get:
      tags:
      - api
      operationId: api_article_info
      responses:
        "200":
          content:
            application/json:
              schema:
                type: object
                additionalProperties: {}
                description: Unspecified response body
      security:
      - tokenAuth: []
      - {}
  /api/authors/match/:
    get:
      tags:
      - api
      operationId: api_author_info
      responses:
        "200":
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Entity'
      security:
      - tokenAuth: []
      - {}
  /api/claims/:
    get:
      tags:
      - api
      description: REST endpoints for viewing and submitting claims
      operationId: api_claims_list
      responses:
        "200":
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Claim'
      security:
      - tokenAuth: []
      - {}
    post:
      tags:
      - api
      description: REST endpoints for viewing and submitting claims
      operationId: api_claims_create
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Claim'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Claim'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Claim'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Claim'
      security:
      - tokenAuth: []
  /api/claims/{id}:
    get:
      tags:
      - api
      operationId: api_claim_detail
      parameters:
      - name: id
        in: path
        description: A unique integer value identifying this claim.
        required: true
        style: simple
        explode: false
        schema:
          type: integer
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClaimWithEvidence'
      security:
      - tokenAuth: []
      - {}
    put:
      tags:
      - api
      operationId: api_claims_update
      parameters:
      - name: id
        in: path
        description: A unique integer value identifying this claim.
        required: true
        style: simple
        explode: false
        schema:
          type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ClaimWithEvidence'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ClaimWithEvidence'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ClaimWithEvidence'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClaimWithEvidence'
      security:
      - tokenAuth: []
    patch:
      tags:
      - api
      operationId: api_claims_partial_update
      parameters:
      - name: id
        in: path
        description: A unique integer value identifying this claim.
        required: true
        style: simple
        explode: false
        schema:
          type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedClaimWithEvidence'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedClaimWithEvidence'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedClaimWithEvidence'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClaimWithEvidence'
      security:
      - tokenAuth: []
  /api/entities/:
    get:
      tags:
      - api
      description: REST endpoints for viewing and submitting entities
      operationId: api_entities_list
      responses:
        "200":
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Entity'
      security:
      - tokenAuth: []
      - {}
    post:
      tags:
      - api
      description: REST endpoints for viewing and submitting entities
      operationId: api_entities_create
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Entity'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Entity'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Entity'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Entity'
      security:
      - tokenAuth: []
  /api/entities/{id}:
    get:
      tags:
      - api
      operationId: api_entity_detail
      parameters:
      - name: id
        in: path
        description: A unique integer value identifying this entity.
        required: true
        style: simple
        explode: false
        schema:
          type: integer
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Entity'
      security:
      - tokenAuth: []
      - {}
    put:
      tags:
      - api
      operationId: api_entities_update
      parameters:
      - name: id
        in: path
        description: A unique integer value identifying this entity.
        required: true
        style: simple
        explode: false
        schema:
          type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Entity'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Entity'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Entity'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Entity'
      security:
      - tokenAuth: []
    patch:
      tags:
      - api
      operationId: api_entities_partial_update
      parameters:
      - name: id
        in: path
        description: A unique integer value identifying this entity.
        required: true
        style: simple
        explode: false
        schema:
          type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedEntity'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedEntity'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedEntity'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Entity'
      security:
      - tokenAuth: []
  /api/evidence/:
    get:
      tags:
      - api
      description: REST endpoints for viewing and submitting claims
      operationId: api_evidence_list
      responses:
        "200":
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/EvidenceWithReview'
      security:
      - tokenAuth: []
      - {}
    post:
      tags:
      - api
      description: REST endpoints for viewing and submitting claims
      operationId: api_evidence_create
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EvidenceWithReview'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/EvidenceWithReview'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/EvidenceWithReview'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EvidenceWithReview'
      security:
      - tokenAuth: []
  /api/evidence/reviews/:
    get:
      tags:
      - api
      description: REST endpoints for viewing and submitting evidence reviews
      operationId: api_evidence_reviews_list
      responses:
        "200":
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/EvidenceReview'
      security:
      - tokenAuth: []
      - {}
    post:
      tags:
      - api
      description: REST endpoints for viewing and submitting evidence reviews
      operationId: api_evidence_reviews_create
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EvidenceReview'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/EvidenceReview'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/EvidenceReview'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EvidenceReview'
      security:
      - tokenAuth: []
  /api/evidence/reviews/{id}:
    get:
      tags:
      - api
      operationId: api_evidence_review_detail
      parameters:
      - name: id
        in: path
        description: A unique integer value identifying this evidence review.
        required: true
        style: simple
        explode: false
        schema:
          type: integer
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EvidenceReview'
      security:
      - tokenAuth: []
      - {}
    put:
      tags:
      - api
      operationId: api_evidence_reviews_update
      parameters:
      - name: id
        in: path
        description: A unique integer value identifying this evidence review.
        required: true
        style: simple
        explode: false
        schema:
          type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EvidenceReview'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/EvidenceReview'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/EvidenceReview'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EvidenceReview'
      security:
      - tokenAuth: []
    patch:
      tags:
      - api
      operationId: api_evidence_reviews_partial_update
      parameters:
      - name: id
        in: path
        description: A unique integer value identifying this evidence review.
        required: true
        style: simple
        explode: false
        schema:
          type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedEvidenceReview'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedEvidenceReview'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedEvidenceReview'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EvidenceReview'
      security:
      - tokenAuth: []
  /api/evidence/{id}:
    get:
      tags:
      - api
      operationId: api_evidence_detail
      parameters:
      - name: id
        in: path
        description: A unique integer value identifying this evidence.
        required: true
        style: simple
        explode: false
        schema:
          type: integer
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Evidence'
      security:
      - tokenAuth: []
      - {}
    put:
      tags:
      - api
      operationId: api_evidence_update
      parameters:
      - name: id
        in: path
        description: A unique integer value identifying this evidence.
        required: true
        style: simple
        explode: false
        schema:
          type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Evidence'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Evidence'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Evidence'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Evidence'
      security:
      - tokenAuth: []
    patch:
      tags:
      - api
      operationId: api_evidence_partial_update
      parameters:
      - name: id
        in: path
        description: A unique integer value identifying this evidence.
        required: true
        style: simple
        explode: false
        schema:
          type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedEvidence'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedEvidence'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedEvidence'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Evidence'
      security:
      - tokenAuth: []
  /api/review/invitations/:
    get:
      tags:
      - api
      operationId: api_review_invitations
      responses:
        "200":
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ReviewInvitation'
      security:
      - tokenAuth: []
  /api/review/invitations/details/:
    get:
      tags:
      - api
      operationId: api_review_invitations_details_list
      responses:
        "200":
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ReviewInvitationDetails'
      security:
      - tokenAuth: []
  /api/review/invitations/details/{id}:
    get:
      tags:
      - api
      operationId: api_review_invitations_details_retrieve
      parameters:
      - name: id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReviewInvitationDetails'
      security:
      - tokenAuth: []
    delete:
      tags:
      - api
      operationId: api_review_invitations_details_destroy
      parameters:
      - name: id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "204":
          description: No response body
      security:
      - tokenAuth: []
  /api/sources/:
    get:
      tags:
      - api
      description: REST endpoints for viewing and submitting sources
      operationId: api_sources_list
      responses:
        "200":
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Source'
      security:
      - tokenAuth: []
      - {}
    post:
      tags:
      - api
      description: REST endpoints for viewing and submitting sources
      operationId: api_sources_create
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Source'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Source'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Source'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Source'
      security:
      - tokenAuth: []
  /api/sources/{id}:
    get:
      tags:
      - api
      operationId: api_source_detail
      parameters:
      - name: id
        in: path
        description: A unique integer value identifying this source.
        required: true
        style: simple
        explode: false
        schema:
          type: integer
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Source'
      security:
      - tokenAuth: []
      - {}
    put:
      tags:
      - api
      operationId: api_sources_update
      parameters:
      - name: id
        in: path
        description: A unique integer value identifying this source.
        required: true
        style: simple
        explode: false
        schema:
          type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Source'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Source'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Source'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Source'
      security:
      - tokenAuth: []
    patch:
      tags:
      - api
      operationId: api_sources_partial_update
      parameters:
      - name: id
        in: path
        description: A unique integer value identifying this source.
        required: true
        style: simple
        explode: false
        schema:
          type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedSource'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedSource'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedSource'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Source'
      security:
      - tokenAuth: []
  /rest-auth/facebook/connect/:
    post:
      tags:
      - rest-auth
      operationId: rest_auth_facebook_connect_create
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SocialConnect'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/SocialConnect'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/SocialConnect'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SocialConnect'
      security:
      - tokenAuth: []
  /rest-auth/login/:
    post:
      tags:
      - rest-auth
      description: |-
        Check the credentials and return the REST Token
        if the credentials are valid and authenticated.
        Calls Django Auth login method to register User ID
        in Django session framework

        Accept the following POST parameters: username, password
        Return the REST Framework Token Object's key.
      operationId: rest_auth_login_create
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Login'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Login'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Login'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Login'
      security:
      - tokenAuth: []
      - {}
  /rest-auth/logout/:
    get:
      tags:
      - rest-auth
      description: |-
        Calls Django logout method and delete the Token object
        assigned to the current User object.

        Accepts/Returns nothing.
      operationId: rest_auth_logout_retrieve
      responses:
        "200":
          content:
            application/json:
              schema:
                type: object
                additionalProperties: {}
                description: Unspecified response body
      security:
      - tokenAuth: []
      - {}
    post:
      tags:
      - rest-auth
      description: |-
        Calls Django logout method and delete the Token object
        assigned to the current User object.

        Accepts/Returns nothing.
      operationId: rest_auth_logout_create
      requestBody:
        content:
          application/json:
            schema:
              type: object
              additionalProperties: {}
              description: Unspecified request body
          application/x-www-form-urlencoded:
            schema:
              type: object
              additionalProperties: {}
              description: Unspecified request body
          multipart/form-data:
            schema:
              type: object
              additionalProperties: {}
              description: Unspecified request body
      responses:
        "200":
          content:
            application/json:
              schema:
                type: object
                additionalProperties: {}
                description: Unspecified response body
      security:
      - tokenAuth: []
      - {}
  /rest-auth/password/change/:
    post:
      tags:
      - rest-auth
      description: |-
        Calls Django Auth SetPasswordForm save method.

        Accepts the following POST parameters: new_password1, new_password2
        Returns the success/fail message.
      operationId: rest_auth_password_change_create
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PasswordChange'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PasswordChange'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PasswordChange'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PasswordChange'
      security:
      - tokenAuth: []
  /rest-auth/password/reset/:
    post:
      tags:
      - rest-auth
      description: |-
        Calls Django Auth PasswordResetForm save method.

        Accepts the following POST parameters: email
        Returns the success/fail message.
      operationId: rest_auth_password_reset_create
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PasswordReset'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PasswordReset'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PasswordReset'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PasswordReset'
      security:
      - tokenAuth: []
      - {}
  /rest-auth/password/reset/confirm/:
    post:
      tags:
      - rest-auth
      description: |-
        Password reset e-mail link is confirmed, therefore
        this resets the user's password.

        Accepts the following POST parameters: token, uid,
            new_password1, new_password2
        Returns the success/fail message.
      operationId: rest_auth_password_reset_confirm_create
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PasswordResetConfirm'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PasswordResetConfirm'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PasswordResetConfirm'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PasswordResetConfirm'
      security:
      - tokenAuth: []
      - {}
  /rest-auth/registration/:
    post:
      tags:
      - rest-auth
      operationId: rest_auth_registration_create
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Register'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Register'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Register'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Register'
      security:
      - tokenAuth: []
      - {}
  /rest-auth/registration/verify-email/:
    post:
      tags:
      - rest-auth
      operationId: rest_auth_registration_verify_email_create
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/VerifyEmail'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/VerifyEmail'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/VerifyEmail'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VerifyEmail'
      security:
      - tokenAuth: []
      - {}
  /rest-auth/twitter/connect/:
    post:
      tags:
      - rest-auth
      operationId: rest_auth_twitter_connect_create
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TwitterConnect'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/TwitterConnect'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/TwitterConnect'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TwitterConnect'
      security:
      - tokenAuth: []
  /rest-auth/user/:
    get:
      tags:
      - rest-auth
      description: |-
        Reads and updates UserModel fields
        Accepts GET, PUT, PATCH methods.

        Default accepted fields: username, first_name, last_name
        Default display fields: pk, username, email, first_name, last_name
        Read-only fields: pk, email

        Returns UserModel fields.
      operationId: rest_auth_user_retrieve
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
      security:
      - tokenAuth: []
    put:
      tags:
      - rest-auth
      description: |-
        Reads and updates UserModel fields
        Accepts GET, PUT, PATCH methods.

        Default accepted fields: username, first_name, last_name
        Default display fields: pk, username, email, first_name, last_name
        Read-only fields: pk, email

        Returns UserModel fields.
      operationId: rest_auth_user_update
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/User'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/User'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
      security:
      - tokenAuth: []
    patch:
      tags:
      - rest-auth
      description: |-
        Reads and updates UserModel fields
        Accepts GET, PUT, PATCH methods.

        Default accepted fields: username, first_name, last_name
        Default display fields: pk, username, email, first_name, last_name
        Read-only fields: pk, email

        Returns UserModel fields.
      operationId: rest_auth_user_partial_update
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedUser'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedUser'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedUser'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
      security:
      - tokenAuth: []
  /socialaccounts/:
    get:
      tags:
      - socialaccounts
      description: List SocialAccounts for the currently logged in user
      operationId: socialaccounts_list
      responses:
        "200":
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SocialAccount'
      security:
      - tokenAuth: []
  /socialaccounts/{id}/disconnect/:
    post:
      tags:
      - socialaccounts
      description: |-
        Disconnect SocialAccount from remote service for
        the currently logged in user
      operationId: socialaccounts_disconnect_create
      parameters:
      - name: id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SocialConnect'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/SocialConnect'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/SocialConnect'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SocialConnect'
      security:
      - tokenAuth: []
components:
  schemas:
    Claim:
      required:
      - claim_text
      - community_truth_consensus
      - expert_truth_consensus
      - id
      - source_of_claim
      - topic
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        claim_text:
          maxLength: 200
          type: string
        description:
          type: string
        topic:
          readOnly: true
          allOf:
          - $ref: '#/components/schemas/Topic'
        source_of_claim:
          readOnly: true
          allOf:
          - $ref: '#/components/schemas/Source'
        expert_truth_consensus:
          readOnly: true
          allOf:
          - $ref: '#/components/schemas/TruthJudgement'
        community_truth_consensus:
          readOnly: true
          allOf:
          - $ref: '#/components/schemas/TruthJudgement'
    ClaimForReview:
      required:
      - claim_text
      - id
      - source_of_claim
      - topic
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        claim_text:
          maxLength: 200
          type: string
        description:
          type: string
        topic:
          readOnly: true
          allOf:
          - $ref: '#/components/schemas/Topic'
        source_of_claim:
          readOnly: true
          allOf:
          - $ref: '#/components/schemas/Source'
    ClaimWithEvidence:
      required:
      - claim_text
      - community_truth_consensus
      - expert_truth_consensus
      - id
      - related_evidence
      - source_of_claim
      - topic
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        claim_text:
          maxLength: 200
          type: string
        description:
          type: string
        topic:
          readOnly: true
          allOf:
          - $ref: '#/components/schemas/Topic'
        source_of_claim:
          readOnly: true
          allOf:
          - $ref: '#/components/schemas/Source'
        related_evidence:
          type: array
          readOnly: true
          items:
            $ref: '#/components/schemas/Evidence'
        expert_truth_consensus:
          readOnly: true
          allOf:
          - $ref: '#/components/schemas/TruthJudgement'
        community_truth_consensus:
          readOnly: true
          allOf:
          - $ref: '#/components/schemas/TruthJudgement'
    Entity:
      required:
      - id
      - name
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        name:
          maxLength: 100
          type: string
        short_bio:
          maxLength: 80
          type: string
    Evidence:
      required:
      - community_consensus_relationship
      - expert_consensus_relationship
      - id
      - num_community_reviews
      - num_expert_reviews
      - source_of_evidence
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        source_of_evidence:
          readOnly: true
          allOf:
          - $ref: '#/components/schemas/Source'
        description:
          type: string
        expert_consensus_relationship:
          readOnly: true
          allOf:
          - $ref: '#/components/schemas/EvidenceRelationship'
        num_expert_reviews:
          type: integer
          readOnly: true
        community_consensus_relationship:
          readOnly: true
          allOf:
          - $ref: '#/components/schemas/EvidenceRelationship'
        num_community_reviews:
          type: integer
          readOnly: true
    EvidenceAndClaimForReview:
      required:
      - claim
      - id
      - source_of_evidence
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        source_of_evidence:
          readOnly: true
          allOf:
          - $ref: '#/components/schemas/Source'
        description:
          type: string
        claim:
          readOnly: true
          allOf:
          - $ref: '#/components/schemas/ClaimForReview'
    EvidenceRelationship:
      type: string
      enum:
      - PROVES
      - SUPPORTS
      - UNRELATED
      - INCONCLUSIVE
      - DISPUTES
      - DISPROVES
      - SPLIT
    EvidenceReview:
      required:
      - deduced_evidence_relationship
      - deduced_source_degree
      - evidence
      - is_reliable
      type: object
      properties:
        deduced_evidence_relationship:
          $ref: '#/components/schemas/EvidenceRelationship'
        deduced_source_degree:
          $ref: '#/components/schemas/SourceDegree'
        is_reliable:
          type: boolean
        additional_comments:
          maxLength: 500
          type: string
        evidence:
          type: integer
          writeOnly: true
    EvidenceWithReview:
      required:
      - claim
      - reviews
      - source_of_evidence
      type: object
      properties:
        source_of_evidence:
          $ref: '#/components/schemas/Source'
        reviews:
          type: array
          items:
            $ref: '#/components/schemas/EvidenceReview'
        claim:
          type: integer
    Login:
      required:
      - password
      type: object
      properties:
        username:
          type: string
        email:
          type: string
          format: email
        password:
          type: string
    PasswordChange:
      required:
      - new_password1
      - new_password2
      type: object
      properties:
        new_password1:
          maxLength: 128
          type: string
        new_password2:
          maxLength: 128
          type: string
    PasswordReset:
      required:
      - email
      type: object
      properties:
        email:
          type: string
          format: email
      description: Serializer for requesting a password reset e-mail.
    PasswordResetConfirm:
      required:
      - new_password1
      - new_password2
      - token
      - uid
      type: object
      properties:
        new_password1:
          maxLength: 128
          type: string
        new_password2:
          maxLength: 128
          type: string
        uid:
          type: string
        token:
          type: string
      description: Serializer for requesting a password reset e-mail.
    PatchedClaimWithEvidence:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        claim_text:
          maxLength: 200
          type: string
        description:
          type: string
        topic:
          readOnly: true
          allOf:
          - $ref: '#/components/schemas/Topic'
        source_of_claim:
          readOnly: true
          allOf:
          - $ref: '#/components/schemas/Source'
        related_evidence:
          type: array
          readOnly: true
          items:
            $ref: '#/components/schemas/Evidence'
        expert_truth_consensus:
          readOnly: true
          allOf:
          - $ref: '#/components/schemas/TruthJudgement'
        community_truth_consensus:
          readOnly: true
          allOf:
          - $ref: '#/components/schemas/TruthJudgement'
    PatchedEntity:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        name:
          maxLength: 100
          type: string
        short_bio:
          maxLength: 80
          type: string
    PatchedEvidence:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        source_of_evidence:
          readOnly: true
          allOf:
          - $ref: '#/components/schemas/Source'
        description:
          type: string
        expert_consensus_relationship:
          readOnly: true
          allOf:
          - $ref: '#/components/schemas/EvidenceRelationship'
        num_expert_reviews:
          type: integer
          readOnly: true
        community_consensus_relationship:
          readOnly: true
          allOf:
          - $ref: '#/components/schemas/EvidenceRelationship'
        num_community_reviews:
          type: integer
          readOnly: true
    PatchedEvidenceReview:
      type: object
      properties:
        deduced_evidence_relationship:
          $ref: '#/components/schemas/EvidenceRelationship'
        deduced_source_degree:
          $ref: '#/components/schemas/SourceDegree'
        is_reliable:
          type: boolean
        additional_comments:
          maxLength: 500
          type: string
        evidence:
          type: integer
          writeOnly: true
    PatchedSource:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        authors:
          type: array
          items:
            $ref: '#/components/schemas/PatchedEntity'
        url:
          maxLength: 200
          type: string
          format: uri
        title:
          maxLength: 250
          type: string
        summary:
          type: string
        date_retrieved:
          type: string
          format: date-time
          readOnly: true
        date_published:
          type: string
          format: date-time
          nullable: true
    PatchedUser:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        username:
          maxLength: 150
          type: string
          description: Required. 150 characters or fewer. Letters, digits and @/./+/-/_
            only.
        email:
          maxLength: 254
          type: string
          format: email
        first_name:
          maxLength: 30
          type: string
        last_name:
          maxLength: 150
          type: string
        bio:
          maxLength: 400
          type: string
    ProviderEnum:
      type: string
      enum:
      - facebook
      - twitter
    Register:
      required:
      - password1
      - password2
      - username
      type: object
      properties:
        username:
          maxLength: 150
          minLength: 1
          type: string
        email:
          type: string
          format: email
        password1:
          type: string
          writeOnly: true
        password2:
          type: string
          writeOnly: true
    ReviewInvitation:
      required:
      - evidence
      - expiration_date
      - id
      - user
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        evidence:
          type: integer
        expiration_date:
          type: string
          format: date-time
        user:
          type: integer
    ReviewInvitationDetails:
      required:
      - evidence
      - expiration_date
      - id
      - user
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        evidence:
          readOnly: true
          allOf:
          - $ref: '#/components/schemas/EvidenceAndClaimForReview'
        expiration_date:
          type: string
          format: date-time
        user:
          type: integer
    SocialAccount:
      required:
      - date_joined
      - id
      - last_login
      - provider
      - uid
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        provider:
          $ref: '#/components/schemas/ProviderEnum'
        uid:
          maxLength: 191
          type: string
        last_login:
          type: string
          format: date-time
          readOnly: true
        date_joined:
          type: string
          format: date-time
          readOnly: true
      description: serialize allauth SocialAccounts for use with a REST API
    SocialConnect:
      type: object
      properties:
        access_token:
          type: string
        code:
          type: string
    Source:
      required:
      - authors
      - date_retrieved
      - id
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        authors:
          type: array
          items:
            $ref: '#/components/schemas/Entity'
        url:
          maxLength: 200
          type: string
          format: uri
        title:
          maxLength: 250
          type: string
        summary:
          type: string
        date_retrieved:
          type: string
          format: date-time
          readOnly: true
        date_published:
          type: string
          format: date-time
          nullable: true
    SourceDegree:
      type: string
      enum:
      - ORIGINAL
      - PRIMARY
      - SECONDARY
      - TERTIARY
    Topic:
      required:
      - name
      type: object
      properties:
        name:
          maxLength: 100
          type: string
    TruthJudgement:
      type: string
      enum:
      - "TRUE"
      - LIKELY_TRUE
      - SPLIT
      - LIKELY_FALSE
      - "FALSE"
    TwitterConnect:
      required:
      - access_token
      - token_secret
      type: object
      properties:
        access_token:
          type: string
        token_secret:
          type: string
    User:
      required:
      - id
      - username
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        username:
          maxLength: 150
          type: string
          description: Required. 150 characters or fewer. Letters, digits and @/./+/-/_
            only.
        email:
          maxLength: 254
          type: string
          format: email
        first_name:
          maxLength: 30
          type: string
        last_name:
          maxLength: 150
          type: string
        bio:
          maxLength: 400
          type: string
    VerifyEmail:
      required:
      - key
      type: object
      properties:
        key:
          type: string
  securitySchemes:
    tokenAuth:
      type: http
      scheme: bearer
      bearerFormat: Token
